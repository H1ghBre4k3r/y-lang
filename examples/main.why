const PI: f64 = 3.1415;

fn add(x: i64, y: i64): i64 {
    x + y
}

fn explicit_return_add(x: i64, y: i64): i64 {
    return x + y;
}

struct TestStruct {
    x: i64;
    bar: (i64, i64) -> i64;
}

struct Bar {
    t: TestStruct;
}

instance TestStruct {
    declare get_id(): i64;

    fn get_x(): i64 {
        return this.x;
    }

    fn set_x(x: i64): void {
        this.x = x;
    }
}

fn takes_function(func: (i64, i64) -> i64): i64 {
    func(42, 69)
}

instance str {
    declare len(): i64;
}

fn main(): i64 {
    let a = add(42, 1337);

    let mut arr = &[42, 1337];

    let arr2 = &[1337, 5];

    let b = explicit_return_add(arr[0], arr2[3]);

    let my_struct = TestStruct {
        x: 42,
        bar: add
    };

    let mut i = 0;

    while (i < 10) {
        i = i + 1;
    }

    let x: (i64) -> i64 = \(x) => x;

    let test_char = 'a';

    let mut foo = &[test_char, 'b'];

    foo[1] = test_char;

    let test_str = "test";

    let len = test_str.len();

    takes_function(add);
    takes_function(explicit_return_add);

    let mut b = Bar {
        t: TestStruct {
            x: 1337,
            bar: add
        }
    };

    b.t.x = 42;

    arr[5] = 1337;

    b.t.bar(4, 2);

    b.t.set_x(1337);

    let value_of_x = b.t.get_x();

    let id = b.t.get_id();

    return 0;
}

fn asd(): TestStruct {
    return TestStruct {
        x: 42,
        bar: add
    };
}

fn foobar(): (i64) -> i64 {
    return \(x) => x;
}
